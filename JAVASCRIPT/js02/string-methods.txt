---------------------------------------
STRINGS in JAVASCRIPT
---------------------
let answer1 = "It's alright";

let answer2 = "He is called 'Johnny'";

let answer3 = 'He is called "Johnny"'; 

or 'It\'s alright'

or 

let answer5 = `He is called "Johnny"`


let myText = "Hello \
Dolly! \
How are \
you ?";
(more than one line possible but result will be at the same line)



---------------------------------------------
STRING LENGTH
-------------
let text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

let x = text.length;
console.log(x);

JavaScript String slice()
--------------------------------------


slice() extracts a part of a string and returns the extracted part in a new string.

The method takes 2 parameters: start position, and end position (end not included). 

let text4 = "Apple, Banana, Kiwi";
let part4 = text4.slice(7,13);
console.log(part4);


SUBSTRING METHOD
----------------------

substring() is similar to slice().
The difference is that start and end values less than 0 are treated as 0 in substring().

let str = "Apple, Banana, Kiwi";
let part = str.substring(0,5);
console.log(part);

let part2 = str.substring(5);
console.log(part2);
-----------------------------------------------

SUBSTR() METHOD
----------------------------

substr() is similar to slice().
The difference is that the second parameter specifies the length of the extracted part.

((((((str.substring(10,2)))))))???:)))))))
let str = "Apple, Banana, Kiwi";
let part = str.substring(10,2);
console.log(part);
----------------------------------------------


Replacing String Content
-----------------------------
The replace() method replaces a specified value with another value in a string:
let text = "Please visit Microsoft and meet the software engineers who work for a long time for Microsoft";
let newText = text.replace("Microsoft","W3Schools");
console.log(newText);

The replace() method does not change the string it is called on.

The replace() method returns a new string.

The replace() method replaces only the first match
By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work

To replace case insensitive, use a regular expression with an /i flag (insensitive)
let text2 = "Please visit Microsoft and meet the software engineers who work for a long time for Microsoft";
let newText2 = text2.replace(/MICROSOFT/i,"W3Schools");
console.log(newText2);

To replace all matches, use a regular expression with a /g flag (global match)

let text3 = "Please visit Microsoft and meet the software engineers who work for a long time for Microsoft";
let newText3 = text3.replace(/Microsoft/g,"W3Schools");
console.log(newText3);


JavaScript String ReplaceAll() 
The replaceAll() method allows you to specify a regular expression instead of a string to be replaced.

If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown. 

let text5 = "I love cats. Cats are very easy to love. Cats are very popular."
text5 = text5.replaceAll("Cats","Dogs");
text5 = text5.replaceAll("cats","dogs");
console.log(text5);

let text6 = "I love cats. Cats are very easy to love. Cats are very popular."
text6 = text6.replaceAll(/Cats/g,"Dogs");
text6 = text6.replaceAll(/cats/g,"dogs");
console.log(text6);


----------------------------------------

Converting to Upper and Lower Case
A string is converted to upper case with toUpperCase():

A string is converted to lower case with toLowerCase(): 

let stat = "Hello My Darling";
let new1 = stat.toUpperCase();
console.log(new1);

let stat1 = "Hello My Darling";
let new2 = stat1.toLowerCase();
console.log(new2);

--------------------------

JavaScript String concat()
concat() joins two or more strings: 

let sent = "Hello";
let sent2 = "JavaScript!";
let sent3 = sent.concat(" ", sent2);
console.log(sent3);

Also pay attention on this example given below:

text = "Hello" + " " + "World!";
text = "Hello".concat(" ", "World!");
console.log(text);

           /* BE CAREFUL!!! */

All string methods return a new string. They don't modify the original string.

Formally said:

Strings are immutable: Strings cannot be changed, only replaced. 

 JavaScript String trimStart() - TrimEnd()
The trimStart() method works like trim(), but removes whitespace only from the start of a string.
The trimEnd() method works like trim(), but removes whitespace only from the end of a string. 

let text1 = "     Hello World!     ";
let text7 = text1.trimStart();
let text8 = text1.trimEnd();
console.log(text1.length);
console.log(text7);
console.log(text7.length);
console.log(text8);
console.log(text8.length);

//-----------------------------//

 JavaScript String padStart() - padEnd()

The padStart() method pads a string from the start.
It pads a string with another string (multiple times) until it reaches a given length.

The padEnd() method pads a string from the end.
It pads a string with another string (multiple times) until it reaches a given length.

Note
The padEnd() method is a string method.

To pad a number, convert the number to a string first. 



let example = "5";
let padded = example.padStart(4,"0");
let padded2 = example.padEnd(4,"0");
console.log(padded);
console.log(padded2);


//------------------------------------\\

 Extracting String Characters
There are 3 methods for extracting string characters:

-charAt(position)
-charCodeAt(position)
-Property access [ ]


JavaScript String charAt()
The charAt() method returns the character at a specified index (position) in a string

The charCodeAt() method returns the unicode of the character at a specified index in a string 

let text9 = "HELLO WORLD";
let char = text9.charAt(0);
let char2 = text9.charCodeAt(0);
let char3 = text9[4];
console.log(char);
console.log(char2);
console.log(char3);


/* Note
Property access might be a little unpredictable:

It makes strings look like arrays (but they are not)
If no character is found, [ ] returns undefined, while charAt() returns an empty string.
It is read only. str[0] = "A" gives no error (but does not work!) 

--------------------

 Converting a String to an Array
If you want to work with a string as an array, you can convert it to an array.

JavaScript String split()
A string can be converted to an array with the split() method:

Example
text.split(",")     Split on commas
text.split(" ")     Split on spaces
text.split("|")     Split on pipe
If the separator is omitted, the returned array will contain the whole string in index [0].

If the separator is "", the returned array will be an array of single characters 

let mySent = "nevertheless";
let mySent2 = mySent.split("");
let mySent3 = mySent.split(",");
let mySent4 = mySent.split("|");
console.log(mySent2);
console.log(mySent3);
console.log(mySent4);

let text10 = "abcdef";
const myArray = text10.split(",");
const myArray2 = text10.split("");
const myArray3 = text10.split(" ");
console.log(myArray);
console.log(myArray2);
console.log(myArray3);


